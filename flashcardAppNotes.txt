Flashcard App
npx prisma migrate dev
npx prisma db seed
npx prisma studio
npx prisma migrate reset



TODO
- navbar
- footer
Decks page
- refactor deck queries into useDeckQueries
- filter label
- reset srs 
- sort by progress
- public decks
- create a deck of cards based on a certain topic, asking AI to generate flashcard data. 


Card Page
- have a table view and a card view
- sort by english by default (asc, desc, japanese asc/desc) 
- refactor useCardQueries so you pass queryParams directly 
- Add cards function
- Edit cards
- Add cards by AI 
- Search cards by all fields 
- see full card details on click
- cut and paste card to another deck
- copy and paste card to another deck 
- use the skeleton loading layout because it's super cool 




Study page
- SRS level tracking happens in 1 field, however, you can have "partial" levels, like 5.5.
- setup endpoint for reset SRS 
- add more data to seeding, including other user 
	- what about when the card comes back after you got it wrong once? it shouldn't update SRS at all. 
- only keep track of japaneseSRS, englishSRS, only update the one that corresponds to the current study mode.
- must also set nextStudyDate separately

2. Make another endpoint with POST that is ONLY for fetching currentStudyCards
- 
YOU COULD ALSO MAYBE PASS AN ADDITION QUERY (THE CORRECT CARD ID, INTO THE FETCH SO THAT IT DOENS'T EXCLUDE THE CARDS WHOSE NEXTSTUDYDATE WAS UPDATED) 


OR WHAT IF YOU PREPARE THE STUDYORDER ARRAY IN DECKS PAGE AND YOU FETCH ONE BY ONE? - no this has performance issues 

- or when you get to cards page, first you fetch based on deckId and currentStudyDate...get the ids, don't invalidate this query, (maybe use regular fetch), and then useQuery to fetch based on ids. 
- or for this page, you just update the data on the frontend manually.....

or you only update the date once in a while?? 
or you do optimistic update for the leveL? and do the actual update after you advance to next card?  



- - show hint

3. 
- you have to handle the case when you select multiple decks...what is the study mode then?

- should there be an entry for the reading of the vocab? 
- maybe give extra "points" 
- smaller text for answer modal so no horizontal overflow

4.
- furigana w/ wanikani API
- current percent correct 
- keyboard shortcut for mark answer correct or not, and show answer


Card page
- UI - easily add, edit, delete cards without modals 


Design stuff
- - fix light mode colors

Extras/animations
- bulbul eats your flowers
- animated "correct"//"incorrect"//"close enough" on submit
- make "checkins" like duolingo, like you got 5 in a row! track streak 
- get "awards" at the end of the lesson, like "speedy mcspeedington" you answered 10 cards within 5 seconds
- example sentences? and other notes  
 

Calc new lessons:
- Out of cards with SRS level 0, after a specified time interval, get a specified # of cards and set nextStudyDate 
- OUT of the reviews, just count the ones with SRS level 0. that's it 

Features
- wanikani integration to show furigana or not
- ability to rate other people's decks, star them
- kanji composition information from wanikani
- ai feature to take a reading passage and extract essential vocabulary. Then put them into a card for you.
- ability to add audio? 
- change font of japanese text to get used to reading different 

Routes
- create card
- read card: (all of your cards, all public cards, one public card, one of your cards)
- update card
- delete card
- CRUD deck
SRS
- update srs level 

User-to-user interactions
- Duplicate card and assign to current user
- duplicate deck and assign to current user


- UI inspiration and disinspiration from Bunpro and Brainscape 
- want to try to integrate paid membership?  


Pages
- Landing Page
- Dashboard (study metrics, upcoming reviews etc.)
- (1) Decks list (option to show public decks from other users)
- (2) Decks detatil (cards list)
- (3) Deck edit (modal?)
- (4) Card edit (modal?)
- Settings (srs settings, light/dark)
- (5) Study page

Navbar
- logo/title (terasu)
- Dashboard (has actions like, study)
- Decks
- Study
- User profile and settings 

Design
- somehow japanese color scheme





get your enus straight
- You should have  file that is ideally generated from your database, that reflects values added there, so you'll have:
export enum CycleWeekThresholds {
  Friday = 'Friday',
  Monday = 'Monday',
  Saturday = 'Saturday',
  Sunday = 'Sunday',
  Thursday = 'Thursday',
  Tuesday = 'Tuesday',
  Wednesday = 'Wednesday'
}

Then in src/common/enum/index.ts you'll have maps of the enum  like: 
export const WeekDayOptions = new EnumMap({
  [CycleWeekThresholds.Sunday]: {
    order: 0,
    value: CycleWeekThresholds.Sunday,
    labelFunction: () => i18next.t('日曜日'),
    key: 0,
  },
  [CycleWeekThresholds.Monday]: {
    order: 1,
    value: CycleWeekThresholds.Monday,
    labelFunction: () => i18next.t('月曜日'),
    key: 1,
  },
  [CycleWeekThresholds.Tuesday]: {
    order: 2,
    value: CycleWeekThresholds.Tuesday,
    labelFunction: () => i18next.t('火曜日'),
    key: 2,
  },
  [CycleWeekThresholds.Wednesday]: {
    order: 3,
    value: CycleWeekThresholds.Wednesday,
    labelFunction: () => i18next.t('水曜日'),
    key: 3,
  },
  [CycleWeekThresholds.Thursday]: {
    order: 4,
    value: CycleWeekThresholds.Thursday,
    labelFunction: () => i18next.t('木曜日'),
    key: 4,
  },
  [CycleWeekThresholds.Friday]: {
    order: 5,
    value: CycleWeekThresholds.Friday,
    labelFunction: () => i18next.t('金曜日'),
    key: 5,
  },
  [CycleWeekThresholds.Saturday]: {
    order: 6,
    value: CycleWeekThresholds.Saturday,
    labelFunction: () => i18next.t('土曜日'),
    key: 6,
  },
});

